#!/usr/bin/env bash

# shellcheck disable=SC2148,SC2089,SC2154
# -*- shell-script -*-
# vim:set ft=sh textwidth=0 wrapmargin=0:
set +x

# Aliases and custom functions
source "$HOME"/dotfiles/colors.sh
source "$HOME"/dotfiles/utils.sh

function command_exists() { type "$1" &>/dev/null; }

if [[ "$unamestr" == 'Darwin' ]]; then
	# macOS-specific
	alias copy_to_clipboard='pbcopy'
	alias setmiddlevolume='sudo osascript -e "set Volume 5"'
	alias eclipseclean='/Applications/eclipse/Eclipse.app/Contents/MacOS/eclipse -clean'
	alias topcoder='javaws ~/Developer/Topcoder/ContestAppletProd.jnlp'
	alias mysql_client='open -a TablePlus'
	alias sc2_hotkeys_edit='vim ~/Library/Application\ Support/Blizzard/StarCraft\ II/Accounts/491096383/Hotkeys/Rapid\ fire\ test.SC2Hotkeys'

	# alias vim='mvim -v'
	alias ls='ls -h -lFG'

	function brew_uninstall_all() {
		brew remove --force "$(brew list --formula)"
		brew remove --cask --force "$(brew list)"
	}

	alias analyze_disk_usage='/Applications/OmniDiskSweeper.app/Contents/MacOS/OmniDiskSweeper'

	alias lsblk='diskutil list'

	alias flush_dns_cache='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'

	alias change_main_screen='~/scripts/hmscreens -setMainID `~/scripts/hmscreens -info | \grep "Screen ID:" | head -2 | tail -1 | sed "s/[^0-9]*//g"`'

	alias reset_wifi='sudo networksetup -setnetworkserviceenabled Wi-Fi off && sleep 2 && sudo networksetup -setnetworkserviceenabled Wi-Fi on'

	function battery_recharge_cycles_count() {
		system_profiler SPPowerDataType | \grep "Cycle Count" | awk '{print $3}'
	}
	alias heic_to_jpg='magick mogrify -monitor -format jpg *.HEIC'

	alias software_version='system_profiler SPSoftwareDataType'

	alias dwg2pdf='/Applications/QCAD.app/Contents/Resources/dwg2pdf -no-dock-icon'

	alias fix_disk="/Applications/Disk\ Drill.app"

	function ios_simulator_screenshot() {
		xcrun simctl io booted screenshot
	}

	function ios_simulator_screencast() {
		xcrun simctl io booted recordVideo ios_simluator_recording.mp4
	}

	alias date='gdate'

	# Toggle "Do not disturb" mode on macOS (via: https://github.com/sindresorhus/do-not-disturb-cli)
	alias dnd-toggle='dnd toggle'

elif test -f /proc/sys/kernel/osrelease && grep -q microsoft /proc/sys/kernel/osrelease; then
	# Windows (WSL)
	alias copy_to_clipboard='clip.exe'

	alias powershell='powershell.exe'

	alias xclip='clip.exe'

	# See: https://github.com/microsoft/winget-cli/issues/688#issuecomment-788391878
	alias winget='powershell.exe /c winget.exe'

	function edit_idea_settings() {
		vim "/mnt/c/Users/""$WINDOWS_USERNAME""/AppData/Roaming/JetBrains/IntelliJIdea2021.3/idea64.exe.vmoptions"
	}

	function open_autostart_folder() {
		local -r autostart_path=$(printf "C:\Users\%s\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup" "$WINDOWS_USERNAME")
		cmd.exe /c explorer.exe "$autostart_path"
		open /mnt/c/ProgramData/Microsoft/Windows/Start\ Menu/Programs/StartUp
	}

	function open() {
		local local_path=$1
		explorer.exe "$(wslpath -w "$local_path")"
	}

	function browse() {
		sensible-browser "$@"
	}

	function github_diff_last_commit() {
		local -r url=$(gh browse --commit --no-browser | sed --expression 's/tree/commit/g')
		browse "$url"
	}

	alias wmic='WMIC.exe'

	# Launches Windows uninstall program (GUI-based)
	alias uninstall='cmd.exe /c appwiz.cpl'

	# shellcheck disable=2154
	alias empty_trash_bin='cmd.exe /c "rd /s /q %systemdrive%\$Recycle.bin" 2&> /dev/null'

	# Note: assumes 'C' is the main drive
	alias analyze_disk_usage='/mnt/c/Program\ Files/WizTree/WizTree.exe "c:"'

	function copy_folder_to_desktop() {
		local src_folder="$1"
		cp -r "$src_folder" "/mnt/c/Users/""$WINDOWS_USERNAME""/Desktop/"
	}

elif [[ "$unamestr" == 'Linux' ]]; then
	# Debian/Ubuntu
	function listkernels() {
		dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'
	}
	alias gdebi='sudo gdebi'

	# Linux specific
	# alias i='sudo apt-get install -y'
	# Install through apt-get and add installed software to list of used commands
	# addcmd() { sudo apt-get install -y $* && echo $* >> ~/install_apt-get.txt; }
	function addcmd() { sudo dnf install -y "$*" && echo "$*" >>~/install_apt-get.txt; }

	alias sound='alsamixer'
	# alias open='xdg-open'
	alias st='scrot -ub '"'"'%Y:%m:%d:%H:%M:%S.png'"'"' -e '"'"'mv $f ~/Downloads/'"'"
	alias catquestions='cat ~/Documents/Q.txt'
	alias mountrw='mount -oÂ remount,rw /'
	alias vim='vim -o'
	alias ls='ls -h --color -lFG'
fi

# General purpose
alias vimb='vim ~/.bashrc'
alias vima='vim ~/.aliases'
alias vimr='vim ~/.remember'
alias vimexecdwm='sudo vim /usr/local/bin/dwm-personalized'
alias vimv='vim ~/.vimrc'
alias vimq='vim ~/Documents/Q.txt'
alias gq='gedit ~/Documents/Q.txt'
alias vimdwmconfig='vim ~/dwm/config.h'

alias cx='chmod +x'
alias dc='cd'
alias m='man'
alias mm='man $(fc -ln -1 | cut -d" " -f 1)'
alias l='ls'
alias v='vim'
alias grep='grep --color -i'
alias rmf='rm -rf'
alias o='rlwrap ocaml'
alias rpm='sudo rpm'

# System commands
alias free='free -h'

alias wgetdir='wget --recursive --no-parent '
function wgetdir2() {
	wget \
		--recursive \
		--no-clobber \
		--page-requisites \
		--html-extension \
		--convert-links \
		--restrict-file-names=windows \
		--domains website.org \
		--no-parent "$1"
}

# Programming etc.
alias m='make'
alias c99='gcc -std=c99'
alias g++='g++ -g -Wall -O3'
alias mountstudents='sshfs ar267209@students.mimuw.edu.pl: /Users/antoni/students'
alias students='export TERM=vt100 ; ssh students.mimuw.edu.pl -l ar267209 -t tmux a'
alias icm='ssh antoni@hpc.icm.edu.pl'
alias icmgw='ssh antoni@gw.icm.edu.pl'
#alias wget='curl -0'
alias xcode="open *.xcodeproj"

function tarfolder() { tar -czf "$1".tar.gz "$1"/*; }
function zipfolder() { zip --recurse-paths "$1".zip "$1"/*; }
function zipfolder_with_password() { zip --encrypt --recurse-paths "$1".zip "$1"/*; }

# SSH
alias sendstud='~/scripts/sendstud.sh'
alias sendicm='~/scripts/sendicm.sh'

# Android development
alias adbd='adb devices'
alias adbreset='adb kill-server;adb start-server'

# Git
alias g='git'
alias gitpu='git pull'
alias gitpua='git push --all -u'
alias gits='git status --short'
alias gitc='git commit -am'
alias gitca='git commit --amend -m'
alias gitch='git checkout'
alias gitcl='git clean -d --force'
alias gitd='git diff'
alias gd='git diff'
alias gitm='git merge'
alias gitb='git branch'
alias gitk='gitk --all'
alias gitundocommit='git reset --soft HEAD~1'

alias grb='git rebase master'
alias grm='git rebase master'
alias grd='git rebase develop'

alias gri='git rebase integration'
alias gd='git diff'
alias gcw='git commit -m "WIP $(date)"'
alias gcm='git checkout master'
alias gg='git add -A && gcw && git squash 2'
alias gp='git pull'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias grs='git rebase --skip'
alias gsa='git stash apply'
alias gpom='git push origin master'
alias gca='git commit --amend'
alias gacw='git add . && gcw'
alias gcb='git checkout -b'

# Set `indent` parameters according to Linux kernel Coding Style
#alias indent='indent -kr -i8'
alias indent='indent -i8 -nbad -bap -nbc -br -brs -c33 -cd33 -ncdb -ce -ci4 -cli0 -d0 -di1 -nfc1 -i4 -ip0 -l75 -lp -npcs -npsl -nsc -nsob'
# Kill all jobs
alias kj='kill -9 $(jobs -p)'

# tmux
alias tm='tmux'
alias tma='tmux attach'
alias tmxa='tmux attach'
alias tmxl='tmux list-window'

# cd directory up
alias ..="cd .."
alias ....="cd ../.."
alias ......="cd ../../.."

# Helper functions
# function gg() { pwd > /tmp/last_path; }
# function hh() { cd $(cat /tmp/last_path); }

alias webserver='python3 -m http.server --bind localhost 8080'
alias s='webserver'
alias gprer='grep --recursive'

alias hgrep='history | grep -i'

# tmux  && source ~/.paths'
alias gopath="export GOPATH=\$(pwd)"
alias dbgui='/usr/share/dbeaver/dbeaver'

function singlemonitor() {
	primary=$(xrandr | \grep "connected primary" | cut -d' ' -f1)
	secondary=$(xrandr | \grep " connected" | \grep -v "primary" | cut -d' ' -f1)
	if [[ $secondary ]]; then
		xrandr --output "$secondary" --off --output "$primary" --auto
	else
		xrandr --output "$primary" --off
		xrandr --output "$primary" --auto
	fi
}

# alias dualmonitor='xrandr --output VGA1 --mode 1920x1200 --right-of LVDS1'
alias dualmonitor='xrandr --output HDMI-1 --mode 1680x1050 --right-of eDP-1'
alias dualmonitor2='xrandr --output VGA1 --mode 1680x1050 --right-of LVDS1'
alias dualmonitor_left='xrandr --output VGA1 --mode 1920x1200 --left-of LVDS1'
alias dualmonitor_ktech='xrandr --output HDMI-1 --mode 2560x1440 --right-of eDP-1'
alias dualmonitor_ktech_pres='xrandr --output HDMI-1 --mode 1920x1080i --right-of eDP-1'
alias dualmonitor_mirror='xrandr --output eDP-1 --rate 60 --mode 1920x1080 --fb 1920x1080 --panning 1920x1080* --output HDMI-1 --mode 1920x1080 --same-as eDP-1'

# Fixing various things on Ubuntu
alias fixaudio='pulseaudio -k'
alias fixaudio2='pavucontrol'
alias fixaudio3='rm -r ~/.config/pulse; pulseaudio -k'
function fixpowerctl() {
	for device in /sys/bus/usb/devices/*/power/control; do
		echo on >"$device"
	done
}
alias fixtouchpad='sudo rmmod psmouse && sudo modprobe psmouse'
alias ubuntu_fix_apt='sudo apt-get install --fix-broken && sudo apt-get autoremove && sudo apt-get update'

alias explorer='nautilus --no-desktop'

# Markdown to PDF
function md2pdf() {
	pandoc -s -V papersize:a4 -V geometry:margin=1in --from gfm -o "$1".pdf "$1"
	open "$1".pdf
}

function rst2pdf() {
	pandoc -s -V papersize:a4 -V geometry:margin=1in --from rst -o "$1".pdf "$1"
	open "$1".pdf
}

# Serves github-rendered Markdown file (from .) on localhost:6419
alias md2html='grip'

# LaTeX
alias latexed1='texmaker'
alias latexed2='gummi'

alias gogo='cd ~/go/'
alias l='ls'

function csview() {
	local file="$1"
	sed -e 's/,,/, ,/g' <"$file" | column -s, -t | less -#5 -N -S
}
# Custom cat: colourised and tabulated for CSV files alias cat='pygmentize -g'
function xcat() {
	filename=$(basename "$1")
	fileext=${filename##*.}
	if [ "$fileext" = "csv" ]; then
		csview "$1"
	else
		pygmentize -g "$1"
	fi
}

# Google search
function search() {
	args="$*"
	searchterm=${args// /%20}
	open "http://www.google.com/search?q=$searchterm"
}

# Launch Vim solarized theme depending on the time of the day
function vv() {
	echo "$1"
	hour=$(date +%H)
	theme=dark
	if [[ $hour -ge 6 && $hour -le 17 ]]; then
		theme=light
	fi
	terminator -l vim-solarized-$theme -c "vim -c 'set gb=$theme'"
}
# Use less +F instead of tail -f
# function tail() {
# if [ "$1" == '-f' ]; then
# shift
# less +F "$@"
# else
# command tail "$@"
# fi
# }
# Display 20 most frequently used commands in Bash
alias mostfrequent='history | cut -d " " -f 4 | tr -c "[:alnum:]" "[\n*]" | sort | uniq -c | sort -nr | head  -20'
# 20 Command Line Tools to Monitor Linux Performance
debug_commands=(ddd kdbg idaq cgdb)
perf_commands=(top vmstat tload stress lsof tcpdump netstat htop atop iotop iostat iptraf iftop monitorix monit arpwatch vnstat dstat nmon collectl dig mpstat pkill powertop pidstat intel_gpu_top glances pstree nload sysstat sysdig)
hex_editors=(jeex okteta hte bless wxHexEditor dhex)
other_commands=(ruptime rwho)
# Networking
networking_commands=(netstat ethtool ping ifconfig arping traceroute iwconfig ifconfig tshark nethogs nmap nbtscan iptables tcpdump iproute2 chargen netcat tc insmod fping nslookup host p0f mtr ipcalc sipcalc iperf)

function whichport() {
	netstat -tulpn | grep "$@"
}

# ip a s #List addresses for interfaces
# ip link show#List network interfaces
# ip route show #List routing table
# ip neigh Same#Show neighbors
# ip r add default via $ip0#Set default gateway to $ip
# ethtool eth0#Show status of ethernet interface eth0
# ip link set dev eth0 up/down#Bring interface eth0 up (or down)

# iwlist scan#List wireless networks in range

# fping is handy, sends lots of pings without waiting for responses, so you can rapidly ping a whole address range
# ping6 is to ping IPV6 address.

# Same for networking_commands
# random number (array len) to choose random command
alias ftp='filezilla'

# Python modules
alias pi='sudo pip install'
alias piu='sudo pip-review --interactive'
alias pil='pip list'

# Execute nth line of a file
function execute_nth_line_of_file() {
	eval "$(sed "$1"'q;d' "$2")"
}

# Countdown, usage:
# countdown 60
# countdown $((2*60*60))
function countdown() {
	date1=$(($(date +%s) + $1))
	while [ "$date1" -ne "$(date +%s)" ]; do
		echo -ne "$(date -u --date @$((date1 - $(date +%s))) +%H:%M:%S)\r"
		sleep 0.1
	done
}

# Stopwach, usage:
# stopwatch
function stopwatch() {
	date1=$(date +%s)
	while true; do
		echo -ne "$(date -u --date @$(($(date +%s) - date1)) +%H:%M:%S)\r"
		sleep 0.1
	done
}

function mvd() { mv "$1" ~/Downloads/; }

# Utils
# Print primitive data types sizes
alias typesizes='perl -V | grep size='
alias interrupts1='cat /proc/interrupts' # Get processor interrupts
alias memory1='cat /proc/meminfo'
alias disktest='sudo smartctl -a /dev/sda | less'
alias dmesg='dmesg -T'
alias dmesgerrors="dmesg | egrep 'error|fail|bug|rtl8|r8|wlan'"

alias irc='hexchat'
alias showdirsizes='du -Pshx * 2>/dev/null'
alias resetsound='pulseaudio -k && sudo alsa force-reload'
alias ns='nvidia-smi'
alias idrsa='cat ~/.ssh/id_rsa.pub'
alias iphone='~/scripts/setup_iphone.sh'
alias i='iphone'
alias pdfmerge='pdfunite'
alias desk='cd ~/Desktop'
alias mountstudents='sudo sshfs -o allow_other ar267209@students.mimuw.edu.pl:/home/students/bioinf/a/ar267209 ~/mount/students/'
alias euler='cd ~/Developer/ProjectEuler/'
alias wallpaperchange='gsettings set org.gnome.desktop.background picture-uri "file:///home/antoni/Documents/wallpaper4.jpg"'
alias showtunnels="sudo lsof -i -n | egrep '\\<ssh\\>'" # Show all open SSH tunnels
alias rsync='rsync --progress'
alias wificonn='sudo wifi-menu wlp2s0'
alias install_ycm='~/.vim/bundle/YouCompleteMe/install.sh --clang-completer'

alias cal='gcalcli'
alias dhcp0='sudo dhcpcd -n eth0'
alias top10size="find . -type f -printf '%s %p\n'| sort -nr | head -10ï»¿"

dl_website() {
	wget \
		--recursive \
		--no-clobber \
		--page-requisites \
		--html-extension \
		--convert-links \
		--restrict-file-names=windows \
		--no-parent \
		"$1"
}

# cd ../../../
function up() {
	how_many_levels="$1"
	while [ "$how_many_levels" -gt 0 ]; do
		cd ..
		how_many_levels=$((how_many_levels - 1))
	done
}

# JSON pretty print
alias json_pretty_print='python -m json.tool'
alias jsonpp=json_pretty_print

# Git
function gc() {
	git commit -am "$*"
}

function gcp() {
	gc "$*"
	git push
}

alias svim='sudo vim'
alias gv='gvim'

# endiannes:
# echo -n I | od -to2 | head -n1 | cut -f2 -d" " | cut -c6

# Show errno errors
alias showerrors="cpp -dM /usr/include/errno.h | grep 'define E' | sort -n -k 3"

alias sourcetmux='tmux source-file ~/.tmux.conf'
alias p='python3'

alias fixandroidstudio='IBUS_ENABLE_SYNC_MODE=1 ibus-daemon -xrd'

function diffcount() {
	diff -U 0 "$1" "$2" | grep -c ^@
}

function dark_background() { export BACKGROUND=dark && source "$HOME"/.common_profile.sh; }
function light_background() { export BACKGROUND=light && source "$HOME"/.common_profile.sh; }

alias rmcmd='sudo apt-get remove'

alias autoremove='sudo apt-get autoremove'

alias redisgui='redis-desktop-manager'

function g++gtest() {
	g++ -std=c++11 "$1" -lgtest -lpthread && ./a.out
}

# Links all .o files to make elf_i386 executable
function link() {
	# Default value = test
	BIN=${1:-test}
	ld -m elf_i386 -s -o "$BIN" ./*.o
}
# GCC flags:
# -fverbose-asm -S

function compile() {
	nasm -f elf "$1"
}

alias burn_iso='wodim'

# Recursive chmod, usage:
# chmod_rec +rx
function chmod_rec() {
	# find . -type d -exec chmod +rx {} \;
	find . -type d -exec chmod "$1" {} \;
}

alias make='make -j 4'
alias gitresettoremote='git fetch origin ; git reset --hard origin/master'
alias rmp='rm ~/Pictures/Screenshot*'
alias i3wmreset='i3-msg "reload"'

# Check if port is open:
alias checkopenports='netstat -ano|grep 443|grep LISTEN'

pythontools=(2to3 pylint pyflakes autopep8)

alias classdiagram='staruml'

alias tmuxhelp='cat ~/dotfiles/tmux.cheat | less'

# Linux
alias show_available_entropy='cat /proc/sys/kernel/random/entropy_avail'

alias dns_list_all='dig +nocmd yourdomain.com any +multiline +noall +answer'
alias install_ycm='~/.vim/bundle/YouCompleteMe/install.py --clang-completer  --gocode-completer'
alias switchm="xrandr --output VGA1 --left-of DP2" # switches monitors (left-right)

alias di='sudo dnf install -y'
alias ds='dnf search -C'
alias dr='sudo dnf remove'

alias youtube-dl='yt-dlp'
alias ydl='youtube-dl --no-playlist --no-mtime'

alias ydlbest='ydl --format best'
alias ydlworst='ydl --format worst'
alias ydlaudio='youtube-dl --format best --extract-audio --audio-format mp3'

function ydlwl() {
	pushd ~/Documents/watch || exit
	ydl --ignore-errors https://www.youtube.com/playlist?list=PLxEBYuU7ONUfj68kBjXfHaAutKqtgAc4s
	popd || exit
}

function rdp() { rdesktop "$@" -rsound:remote -5 -K -r clipboard:CLIPBOARD; }

function swap() {
	local TMPFILE=tmp.$$
	mv "$1" $TMPFILE
	mv "$2" "$1"
	mv $TMPFILE "$2"
}

# Copies SSH RSA key to X clipboard
alias copy_ssh_public_key_to_clipboard='cat ~/.ssh/id_rsa.pub | copy_to_clipboard'

function dnfs() {
	arg_count="$#"
	if [ $arg_count -eq 2 ]; then
		dnf search "$1" | grep "$2"
	elif [ $arg_count -eq 1 ]; then
		dnf search "$1"
	fi
}

alias cups='lpstat' # -p -d

alias zsh_debug='zsh -i -x -c exit'

function fix_zsh_history() {
	cd "$HOME" >/dev/null || exit
	mv .zsh_history .zsh_history_bad
	strings .zsh_history_bad >.zsh_history
	fc -R .zsh_history
}

function fix_perms() {
	find . -type d -exec chmod 775 {} \;
	find . -type f -exec chmod 664 {} \;
}

function get_ip() {
	host "$1" | awk '/has address/ { print $4 }' | head -n 1
}

# Query Linux man page for certain flag
# Example: manf iptables -t
function manf() {
	man "$1" | less -p "^ +\-${2}"
}

alias dmidecode='sudo dmidecode'
alias ipconfig='ifconfig'

alias remove_all_docker_images='docker rm -vf $(docker ps -aq)'

# Delete all containers & all images
function docker_remove_all() {
	~/scripts/docker_remove_all.sh
}

function list_installed() {
	dnf list installed | awk -F. -v ORS="\0" '{print $1" "}' | sort -zu && echo ""
}

# $1 - name of the folder to zip
function zip_and_move() {
	zip --recurse-paths ~/Downloads/"$1".zip "$1"/* "$1"/.*
}

# Download .gitignore
# Usage: gitignore language
function gitignore() {
	local -r language_name="$1"

	curl -L -s "https://www.gitignore.io/api/""$language_name" | awk 'NR>2 {print last} {last=$0}' | tee .gitignore
}

# Helper for watch_dir
function watch_dir_action() {
	while read -r path action file; do
		printf "[${colors[Green]}%s${colors[White]}]\t${colors[Red]}%s${colors[White]}\tin\t%s\n" "$action" "$file" "$path"
	done
}

# $1 - dir to be watched for CREATE or MOVED_TO events
function watch_dir() {
	inotifywait -m "$1" -e create -e moved_to | watch_dir_action
}

HTML_TIDY_TMP_FILE="/tmp/tidy_log.txt"

# Reformats JS/JSON/HTML code
# Usage:
#   ./reformat filename
function reformat() {
	tmpf=/tmp/in_place_change_tmp
	filename=$(basename "$1")
	ext="${filename##*.}"

	echo "File extension: ""$ext"

	case $ext in
	"md")
		# Reformat against Github's Markdown styleguide
		pandoc -f markdown -t markdown_github "$1" >"$tmpf"
		;;
	"js")
		eslint --fix "$1" >"$tmpf"
		;;
	"jsx")
		prettier --write "$1"
		;;
	"json")
		jq -M '.' >"$tmpf" <"$1"
		;;
	"py")
		autopep8 --in-place "$1"
		;;
	"html")
		tidy -indent -wrap 80 -utf8 -clean -file $HTML_TIDY_TMP_FILE "$1" >"$tmpf"
		;;
	esac
	mv -f "$tmpf" "$1" 2>/dev/null
}

alias a='cd ~/adnetwork'

# Toggles VPN connection
function vpn() {
	vpn_conn="VPN"
	vpn_cmd="up"
	if nmcli connection show --active | grep -q VPN; then
		vpn_cmd="down"
	fi

	nmcli connection $vpn_cmd id $vpn_conn | tr ' ' '\n' | \grep --color activated
}

function redshift_loc() {
	redshift-gtk -v -l "$DEFAULT_COORDS"
}

function weather() {
	curl --silent wttr.in/"${1:-$DEFAULT_CITY}" | head -n 7
}

# Prints aggregated %MEM for a process ($1)
function total_mem() {
	top -b -n1 | \grep "$1" | awk '{ SUM += $10} END { print SUM }'
}

# Edit last gnome-screenshot taken
function nomacslast() {
	files=(~/Pictures/*)
	nomacs "${files[-1]}"
}

# encrypt (filename -> filename.enc)
# $1 - input file
# $2 - password
function encrypt() {
	openssl enc -aes-256-cbc -in "$1" -out "$1".enc -k "$2"
}

# decrypt (filename.enc -> filename)
# $1 - input file
# $2 - password
function decrypt() {
	openssl enc -aes-256-cbc -d -in "$1".enc -out "$1" -k "$2"
}

# SSH and attach to tmux
function sshtmux() {
	ssh "$1" -t tmux a
}

function pip_list() {
	pip3 list --format=columns | awk '!/Package|---/{ print $1}'
	pip list --format=columns | awk '!/Package|---/{ print $1}'
}

function update_packages_mac() {
	# Skip this step for now, downloading >10 GBs of XCode every now and then takes a lot of time and
	# doesn't really make an improvement
	# echo "Updating Mac AppStore packages..."
	# mas upgrade;

	echo "Updating Homebrew packages..."
	brew cleanup

	# Fix casks with `depends_on` that reference pre-Mavericks
	/usr/bin/find "$(brew --prefix)/Caskroom/"*'/.metadata' -type f -name '*.rb' -print0 | /usr/bin/xargs -0 /usr/bin/sed -i '' '/depends_on macos:/d'

	# Somtimes needed to run before 'brew update'
	git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" fetch --unshallow
	git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" fetch --unshallow
	brew update
	brew upgrade
	brew upgrade --cask --force
	brew unlink node && brew link --overwrite node
	# Temporary overwrite for Node 16
	brew link --force --overwrite node@16
}

function update_packages_fedora() {
	sudo dnf -y update
	sudo dnf -y autoremove
}

function update_packages_ubuntu() {
	echo "Updating apt packages..."
	sudo apt-get update &>/dev/null
	echo "Upgrading apt packages..."
	sudo apt-get upgrade -y &>/dev/null
	echo "Autoremoving apt packages..."
	sudo apt-get autoremove &>/dev/null
}

function update_xcode() {
	sudo rm -rf /Library/Developer/CommandLineTools
	xcode-select --install
}

function reinstall_pip_packages() {
	pip3 list --outdated --format=freeze | cut -d = -f 1 | xargs -n1 pip3 install --upgrade --force-reinstall
}

function update_pip_packages() {
	pip3 list --outdated --format=freeze | \grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U
}

function reinstall_python() {
	sudo apt-get remove --assume-yes python python3 python3-pip
	sudo apt-get install --assume-yes python python3 python3-pip
}

function upgrade_apt_packages() {
	echo "Upgrading APT packages..."
	# https://askubuntu.com/a/668859/342465
	sudo apt-get update -qq -o=Dpkg::Use-Pty=0 && sudo apt-get upgrade -qq -o=Dpkg::Use-Pty=0 --assume-yes
}

function update_all() {
	# sudo_keep_alive

	pushd ~ &>/dev/null || exit # to correctly update global NPM packages

	if [[ "$unamestr" == 'Darwin' ]]; then
		# This sometimes breaks Homebrew taps upgrade
		# update_xcode

		# echo "Updating macOS (if updates available)"
		# softwareupdate -i -a

		"$DOTFILES_DIR"/mac/post_install.sh

		# Do the rest without sudo
		sudo --reset-timestamp
	fi

	# WSL 2
	if test -f /proc/sys/kernel/osrelease && grep -q microsoft /proc/sys/kernel/osrelease; then
		echo "Updating WSL..."
		wsl.exe --update

		echo "Upgrading APT packages..."
		# Run it first as it requires sudo
		upgrade_apt_packages

		echo "Upgrading WSL packages..."
		# Close VS Code beforehand (winget will request to close it via GUI otherwise)
		taskkill.exe /IM Code.exe

		winget upgrade --all

		# Delete all links on Desktop: current user
		rm -rf /mnt/c/Users/Komputer/Desktop/*.{lnk,url}

		# Delete all links on Desktop: all users
		# [Environment]::GetFolderPath('CommonDesktopDirectory')
		rm -rf /mnt/c/Users/Public/Desktop/*.{lnk,url}
	fi

	echo "Upgrading oh-my-zsh..."
	omz update --unattended

	echo "Upgrading Vim plugins..."
	vim -i NONE -c VundleUpdate -c quitall &>/dev/null

	echo "Upgrading npm packages..."
	npm update --no-progress --quiet --global
	npm install --no-progress --silent --quiet npm

	echo "Upgrading PIP packages..."
	# pip3 install --upgrade pip --user;
	# Running it twice seems to resolve some dependency issues which PIP reports when running it just one time
	update_pip_packages
	update_pip_packages

	# update_packages_mac

	popd &>/dev/null || exit

	printf "Upgrading all applications on %s\n" "$(date)" >>~/update_log.txt
	# rm -f ~/package.json
}

function merge_and_push_branch() {
	"$HOME"/scripts/merge_and_push_branch.sh "$1"
}

function response_time() {
	FORMAT_PATH=$(realpath ~/scripts/curl-format.txt)
	curl -w "@""$FORMAT_PATH" -o /dev/null -s "$1"
}

# Example
# how_in bash get length of array
function how_in() {
	where="$1"
	shift
	IFS=+ curl "https://cht.sh/$where/ $*"
}

# TESTIT
# Add changes to a selected commit.
# Usage:

# * modify file
# * git-amend-to $old_sha
git-amend-to() (
	# Stash, apply to past commit, and rebase the current branch on to of the result.
	current_branch="$(git rev-parse --abbrev-ref HEAD)"
	apply_to="$1"
	git stash
	git checkout "$apply_to"
	git stash apply
	git add -u
	git commit --amend --no-edit
	new_sha="$(git log --format="%H" -n 1)"
	git checkout "$current_branch"
	git rebase --onto "$new_sha" "$apply_to"
)

alias pr='~/scripts/pull_request.sh'
alias pr_merge='~/scripts/pull_request_merge.sh'

alias bci='brew cask install'
# Usage openssl_website google.com:80
alias openssl_website='openssl s_client -connect -crlf'

function json_compare() {
	diff <(jq -S . "$2") <(jq -S . "$2")
}

function pdf_compress() {
	local input_file=$1
	local output_file=${2:-$1_output.pdf}
	gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$output_file" "$input_file"
}

# function diff {
# colordiff --unified "$@" | less --RAW-CONTROL-CHARS --quit-if-one-screen
# }

alias sizes='du -sh * | sort -hr'

alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'

# Converts SVG to PNG
# Usage svg_to_png input_image_path [output_image_height]
function svg_to_png() {
	local -r filename=$(filename_without_extension "$1")
	local output_filename=$filename.png
	local output_image_height=${2:-32}
	rsvg-convert -h "$output_image_height" "$1" >"$output_filename" && echo "Successfully created $output_filename" || echo "Error converting $1 to $output_filename"
}

function webptopng() {
	local -r filename=$(filename_without_extension "$1")
	local output_filename=$filename.png
	local output_image_height=${2:-32}
	dwebp "$1" -o "$output_filename"
}

function pdftojpg() {
	pdfimages -j "$1" page
}

function android_update() {
	android update sdk --no-ui
}

function last_modified_directory() {
	# shellcheck disable=2012
	\ls -t | head -n 1
}

# Does a subsitution in filenames in all files in the current directory
# See lowercase_first_letter for example use case
function convert_all_files() {
	local substitution="$1"

	# shellcheck disable=SC2016
	$BASH -c 'for filename in *;do mv "$filename" ${filename'"$substitution"'};done'
}

# Spaces to underscores
function spaces_to_underscores() {
	convert_all_files "// /_"
}

# Lowercase the first letter
function lowercase_first_letter() {
	convert_all_files ","
}

# Uppercase first letter
function uppercase_first_letter() {
	convert_all_files "^"
}

# Lowercase all letters
function lowercase_all_letters() {
	convert_all_files "m,"
}

# Uppercase all letters
function uppercase_all_letters() {
	convert_all_files "^^"
}

alias buildlib='cd ~/components-library ; npm run build && firebase deploy && npm run clean'
alias mac_serial_number="system_profiler SPHardwareDataType | \grep '      Serial Number' | cut -d' ' -f 10 | pbcopy"

# Updates scripts repo with current date in the message
# of the (possibly empty) commit
function update_scripts_repo() {
	pushd ~/scripts || exit
	git add .
	git commit --allow-empty --message "Update ""$(date +%d-%m-%Y)"
	git push origin
	popd || exit
}

alias nrs='npm run start'
alias ys='yarn start'
alias yi='yarn install'
alias yt='yarn test'
alias yc='yarn run clean'
alias yrc='yarn run clean'

function mcd() {
	mkdir "$1" && cd "$1" || exit
}

alias npmu='npm install -g npm'

alias yarnnoproxy='yarn --no-default-rc'

alias rmrf='rm -rf'

alias tmux2x2='tmux new-session \; split-window -v \; split-window -h \; select-pane -t 0 \; split-window -h\; select-pane -t 0;'

alias removevpn='brew cask remove nordvpn || brew cask install nordvpn'

alias nvm_default='nvm alias default node'
alias nvm_current='nvm install node --reinstall-packages-from=$(nvm current)'

function mov2mp4() {
	local -r filename=$(filename_without_extension "$1")
	ffmpeg -i "$filename".mov -vcodec h264 -acodec mp2 "$filename".mp4
}

# Rename  part of filename in each file in a directory
function rename_filename_part() {
	for filename in *; do
		[ -f "$filename" ] || continue
		mv "$filename" "${filename/$1/$2}"
	done
}

# Remove part of filename in each file in a directory
function remove_filename_part() {
	for filename in *; do
		[ -f "$filename" ] || continue
		mv "$filename" "${filename//$1/}"
	done
}

function add_prefix_to_filename() {
	local prefix=$1
	for filename in *; do
		[ -f "$filename" ] || continue
		mv "$filename" "$prefix$filename"
	done
}

function add_suffix_to_filename() {
	local suffix=$1
	for filename in *; do
		[ -f "$filename" ] || continue
		name=$(filename_without_extension "$filename")
		extension=$(filename_extension "$filename")
		mv "$filename" "$name$suffix.$extension"
	done
}

# Prints the lsof entry of the process that listens on a given port
# Usage:
#   listening firefox
#   listening 8080
function listening() {
	if [ $# -eq 0 ]; then
		sudo lsof -iTCP -sTCP:LISTEN -n -P
	elif [ $# -eq 1 ]; then
		sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color "$1"
	else
		echo "Usage: listening [pattern]"
	fi
}

function get_cookies() {
	local url=$1
	cgurl --silent --output /dev/null --cookie-jar - "$url"
}

alias instagram_dl='instalooter user'

# Ubuntu
function toggle_wifi() {
	wifi="$(nmcli r wifi | awk 'FNR = 2 {print $1}')"
	if [ "$wifi" == "enabled" ]; then
		nmcli r wifi off
	else
		nmcli r wifi on
	fi
}

# One-liner to generate Self-Signed SSL Certificate+Key without any annoying prompts or CSRs
function generate_self_signed_certificate() {
	openssl req -new -newkey rsa:4096 -days $((5 * 3650)) -nodes -x509 -subj "/C=<Country Code>/ST=<State>/L=<City>/O=<Organization>/CN=<Common Name>" -keyout certificate.key -out certificate.crt
}

function sync_branch_with_master() {
	git reset --hard origin/master && git fp
}

function resize_to_icon() {
	local input_file=$1
	local output_file=$2
	convert "$input_file" -thumbnail '1024x1024>' -gravity center -background transparent -extent 1024x1024 "$output_file"
}

function reinstall_cocoapods() {
	sudo gem uninstall cocoapods
	sudo gem install -n /usr/local/bin cocoapods
}

function force_remove_brew_cask() {
	local cask_name=$1
	rm -rf "$(brew --prefix)/Caskroom/$cask_name"
}

alias killfsck='sudo pkill -f fsck'

alias prettify="yarn prettier:fix && gc \"chore: Run Prettier on the entire project\""

function copy_as_base64() {
	local file_path=$1
	openssl base64 <"$file_path" | tr -d '\n' | copy_to_clipboard
}

function display_notification() {
	local title=$1
	local message=$2
	osascript -e "display notification \"$message\" with title \"$title\""

	# Growl alternative
	# growlnotify -n "$title" -m "$message"
}

function save_last_n_lines_to_file() {
	local LINES=$1
	local -r filename=~/tmp/$(date)last_$LINES.txt
	fc -ln -"$LINES" | head -n "$LINES" >"$filename"
	fc -ln -"$LINES" | head -n "$LINES" >copy_to_clipboard
	echo "Saved to $filename"
}

function get_repo_name() {
	basename -s .git "$(git config --get remote.origin.url)"
}

alias mk_iphone_dir='mkdir ~/Desktop/$(date +%Y%m%d)_iphone_photos'

# Example: apply_to_all_files 'resize_image 50%'
function apply_to_all_files() {
	local command="$*"
	for filename in *; do
		eval "${command} ${filename}"
	done
}

# Resizes image in-place
function resize_image() {
	local resize_arg=$1
	local input=$2
	mogrify -resize "$resize_arg" "$input"
}

function shellcheck_autofix() {
	local filename=$1
	shellcheck --format diff "$filename" | git apply
}

function copy_last_command() {
	fc -ln -1 | awk '{$1=$1}1' | copy_to_clipboard
}

# Usage: add_diagonal_watermak filename quoted_watermark_text
function add_diagonal_watermak() {
	local filename=$1
	local watermark_text=$2

	convert "$filename" \
		\( -size 1500x -background none -fill blue -gravity center \
		label:"$watermark_text" -trim -rotate -30 \
		-bordercolor none -border 10 \
		-write mpr:wm +delete \
		+clone -fill mpr:wm -draw 'color 0,0 reset' \) \
		-compose over -composite \
		"$filename"
}

# Usage:
# random_password [password_length]
function random_password() {
	local password_length=${1:-16}
	# local PWGEN_REMOVE_CHARACTERS=\'\"\@\?\^\&\*\(\)\`\:\~\?\;\:\[\]\{\}\.\,\\\/\|
	local PWGEN_REMOVE_CHARACTERS=\&\\
	pwgen --secure --symbols "$password_length" 1 --remove-chars $PWGEN_REMOVE_CHARACTERS
}

# returns commit date, author name and commit subject for a date range given
# Example: commits_between_dates 2020-12-01 2020-12-31
function commits_between_dates {
	local date_from=$1
	local date_to=$2
	git log --date=iso --pretty=format:'%ad	%aN	%s' | awk '$0 >= "'"$date_from"'" && $0 <= "'"$date_to"'"'
}

function git_delete_tag() {
	local tagname=$1
	git tag --delete "$tagname"
	git push --delete origin "$tagname"
}

alias github_merge_pr='gh pr merge $(git branch --show-current) --delete-branch  --rebase'

# Generate a random 32 character alphanumeric string (upper
# and lowercase) and numbers in Bash
# Alternative
# tr -dc '[:alnum:]' < /dev/urandom | dd bs=4 count=8 2>/dev/null
function random-string() {
	# Add special chars:
	# env LC_ALL=C tr -dc '(\&\_a-zA-Z0-9\^\*\@'
	env LC_ALL=C tr -dc 'a-zA-Z0-9' </dev/urandom | fold -w "${1:-32}" | head -n 1
}

function brew_cleanup_package() {
	local package_name=$1

	# don't use reinstall
	brew uninstall -f "$package_name"

	# remove possible broken symlinks
	brew cleanup

	# install httping again
	brew install "$package_name"

	# check the version
	brew info "$package_name"
}

function reinstall_pip() {
	python3 -m pip install --upgrade --force-reinstall pip
}

function convert_to_grayscale() {
	local input_filename="$1"
	local -r filename=$(filename_without_extension "$1")
	local output_filename="$filename"_grayscale.png
	convert "$input_filename" -grayscale Rec709Luminance "$output_filename"
}

alias gl='git log'
function copy_branch_name() {
	if [[ -n $(git branch --show-current 2>/dev/null) ]]; then
		branch=$(git branch --show-current)
	else
		branch=$(awk -F '/' '{print $NF}' <.git/HEAD)
	fi

	echo "$branch" | tr -d "\n" | copy_to_clipboard
}
alias copy_last_commit_message='git log -1 --pretty=%B | tr -d "\n" | copy_to_clipboard'
alias copy_current_directory='pwd | copy_to_clipboard'

function webm_to_mp4() {
	local -r filename=$(filename_without_extension "$1")
	local output_filename=$filename.mp4
	local output_image_height=${2:-32}
	local fps=24
	ffmpeg -hide_banner -loglevel error -fflags +genpts -i "$1" -r $fps "$output_filename" && echo "Successfully created $output_filename" || echo "Error converting $1 to $output_filename"
}

# Copy command output to clipboard
# Usage: echo 'Hello world' | t
alias t='tee >(copy_to_clipboard)'

function remove_password_from_pdf() {
	local -r filename=$(filename_without_extension "$1")
	local -r password=$2
	qpdf -password="$password" -decrypt "$filename".pdf "$filename""_no_password.pdf"
}

function sync_dotfiles() {
	pushd ~/scripts && gacw && git push origin master && popd || exit
	pushd ~/dotfiles && gacw && git push origin master && popd || exit
}

# .ts do .mp4:
# ffmpeg -i in.ts -acodec copy -vcodec copy out.mp4
function download_youtube_stream() {
	local youtube_video_url=$1
	youtube-dl --list-formats "$youtube_video_url"

	printf "Enter stream format (e.g. 94) "
	read -r stream_format

	ffmpeg -i "$(youtube-dl --format "$stream_format" --get-url "$youtube_video_url") -c copy $(date +'%Y%m%d')"_recording.ts
}

# password protect (encrypt) PDF with 256-bit AES encryption
# usage:
# encrypt_pdf filename.pdf
# filename_encrypted.pdf will be created
function encrypt_pdf() {
	local -r input_file="$1"
	printf "Enter password:"
	read -rs pdf_password
	printf "\n"
	local -r user_password="$pdf_password"
	local -r owner_password="$user_password"
	qpdf --encrypt "$user_password" "$owner_password" 256 -- "$input_file" "$(filename_without_extension "$1")""_encrypted.pdf"
}

function download_npm_tarball() {
	local -r package_name="$1"
	local -r package_url=$(curl --silent --show-error https://registry.npmjs.org/"$package_name"/ | jq --raw-output '.versions[."dist-tags".latest].dist.tarball')

	wget "$package_url"
}

alias grhom='git reset --hard origin/master'
alias grhh='git reset --hard HEAD~'
alias gs2='git squash 2'

function rebase_all() {
	local repos=(orval svgo)

	for repo in "${repos[@]}"; do
		pushd "$HOME/$repo" || exit
		bash rebase.sh
		popd || exit
	done
}

function first_day_of_month() {
	local -r date=$(gdate --date="$(gdate +'%Y-%m-01')" "+%F")

	echo "$date"
}

function last_day_of_month() {
	local -r date=$(gdate --date="$(gdate +'%Y-%m-01') - 1 second" "+%F")

	echo "$date"
}

function yarn_reinstall_dev() {
	local package_name=$1
	yarn remove "$package_name"
	yarn add --dev "$package_name"
}

function show_ip_address() {
	ip address | grep "scope global" | grep -Po '(?<=inet )[\d.]+'
}

function run_after_seconds() {
	local seconds=$1
	shift
	sleep "$seconds" && "$@" &
}

alias merge_pdfs_1='gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=merged.pdf ' # here go the PDF to be merged

function merge_pdfs_2 {
	pdfunite "$@" merged.pdf
	printf 'Files merged into merged.pdf file'
}

alias restart_tmux='tmux kill-server && tmux'

function mov_to_mp4() {
	local input_filename="$1"
	local -r filename=$(filename_without_extension "$1")
	local output_filename=$filename.mp4
	local fps=60

	ffmpeg -i "$input_filename" -loglevel error -fflags +genpts -r $fps "$output_filename" && echo "Successfully created $output_filename" || echo "Error converting $1 to $output_filename"
}

function kill_process_on_port() {
	local port="$1"

	if lsof -t -i tcp:"$port"; then
		lsof -t -i tcp:"$port" | xargs kill -9
	else
		printf "No process listening on port %s\n" "$port"
	fi
}

function move_files_created_at_to_directory() {
	local creation_date="$1"

	local directory="$2"

	set -x
	find . -type f -newermt "$(date_plus_days "$creation_date" 1)" ! -newermt "$creation_date_plus_1_day" -exec mv "{}" "$directory" \;
	set +x
}

function count_files_in_directory() {
	local -r directory="$1"
	find "$directory" -type f | wc -l
}

# Windows
# Opens Notepad++
function np() {
	# To follow symlinks inside WSL
	local -r file_path=$(wslpath -w "$1")

	/mnt/c/Program\ Files/Notepad++/notepad++.exe "$file_path"
}

# Windows
function kill_executable() {
	local executable="$1"
	taskkill.exe /F /IM "$executable.exe" /T
}

function git_repository_name() {
	basename "$(git rev-parse --show-toplevel)"
}

# Usage:
# extract_field_from_json package.json version
function extract_field_from_json() {
	local filename=$1
	local field_name=$2
	json_field_value=$(
		grep "$field_name" "$filename" |
			head -1 |
			awk -F: '{ print $2 }' |
			sed 's/[",]//g'
	)

	printf "%s" "$json_field_value" |
		xargs # trim
}

function show_function_code() {
	local function_name="$1"
	declare -f "$function_name"
}

function is_linux_inside_wsl() {
	if grep -q Microsoft /proc/version; then
		#"Ubuntu on Windows"
		echo 1
	fi
}

function sync_dotfiles() {
	pushd ~/dotfiles || exit
	git pull
	git push origin master
	popd || exit
	pushd ~/scripts || exit
	git pull
	git push origin master
	popd || exit
}

# Fixes a corrupt .zsh_history file
function fix_zsh_history_file() {
	mv ~/.zsh_history ~/.zsh_history_bad
	strings -eS ~/.zsh_history_bad >~/.zsh_history
	fc -R ~/.zsh_history
	rm ~/.zsh_history_bad
}

function clear_sensitive_data_in_shell_history() {
	# macOS
	# LC_ALL=C sed -i '' '/TOKEN/d' $HISTFILE;
	LC_ALL=C sed -i '/TOKEN/d' "$HISTFILE"
}

function set_sensitive_variable() {
	local variable_name=$1
	local variable_value=$2

	current_histfile=$HISTFILE
	unset HISTFILE
	export "$variable_name"="$variable_value"
	HISTFILE=$current_histfile
}

# sudo will prompt for a password (if one is required by the security policy) and will not update the user's cached credentials.
function sudo_forget() {
	sudo -k "$@"
}

# Usage:
# json_to_table t.json id,name
# Where t.json is:
# [{
#  "name": "George",
#  "id": 12,
#  "email": "george@domain.example"
# }, {
#  "name": "Jack",
#  "id": 18,
#  "email": "jack@domain.example"
# }]
function json_to_table() {
	local filename="$1"
	local table_fields="$2"

	JSON_FIELDS='[.'${table_fields//,/, .}']'
	TABLE_FIELDS='"'${table_fields//,/\",\"}'"'
	jq --raw-output \
		"([$TABLE_FIELDS] | (., map(length*\"-\"))), (.[] | $JSON_FIELDS) | @tsv" "$filename"
}

function grep33() {
	grep -A 3 -B 3 "$@"
}

function ls_n_random_files() {
	local -r files_count="$1"
	find . | shuf --head-count "$files_count"
}

### Windows-only

# Windows only
# Show file app association
alias assoc='cmd.exe /c assoc'

alias ftype='cmd.exe /c ftype'

# Windows
alias wsl='wsl.exe'

# Windows only for now
function idea() {
	cmd.exe /c "C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2022.1\bin\idea64.exe" dontReopenProjects nosplash
}

# Windows
function terminate_docker() {
	wsl --terminate docker-desktop
	wsl --terminate docker-desktop-data
}

# Windows
alias systeminfo='systeminfo.exe'
# Windows
alias systeminfo2='msinfo32.exe'

# Usage:
# desktop_shortcut_to_wsl_folder folder_path
function desktop_shortcut_to_wsl_folder() {
	~/scripts/windows/desktop_shortcut_to_wsl_folder.sh "$@"
}

# Windows
alias disk_management='cmd.exe /c diskmgmt.msc'
alias device_management='cmd.exe /c devmgmt.msc'

# Windows
# Usage:
# print_windows_environmnent_variable APPDATA
function print_windows_environmnent_variable() {
	local variable_name="$1"
	powershell.exe "\$env:$variable_name"
}

# Windows only
# easily retrieve (and define, if asked to) any Windows Environment variable.
# It also takes care of paths so they get converted from Win32 to Un*x-line.
# Examples:
# winenv PROGRAMFILES
# winenv APPDATA
function winenv() {
	if [ "$#" == "0" ] || [ "$1" == "--help" ]; then
		echo $'\n'Usage:
		echo $'\t'winenv [-d] WINDOWS_ENVIRONEMENT_VARIABLE_NAME
		echo $'\t'-d: Defines environment variable in current shell
		echo $'\t    Note that paths will be translated into un*x-like paths\n'
		return
	fi

	local -r IFS=$'\n'
	local PATH_TO_TRANSLATE=$1

	[ "$1" == "-d" ] && PATH_TO_TRANSLATE=$2

	local -r VAR=$(cmd.exe /c echo %"${PATH_TO_TRANSLATE}"% | tr -d '\r')
	local -r NEW=$(wslpath -u "${VAR}" 2>/dev/null || echo "${VAR}")

	echo "${PATH_TO_TRANSLATE} = ${VAR} -> ${NEW}"

	[ "$1" == "-d" ] && export "${PATH_TO_TRANSLATE}=${NEW}"
}

# Shorthand aliases

alias p3='python3'

function h() {
	head -n "$@"
}

alias c='code -n .'

# Git aliases

function git_reset_to_branch() {
	local branch_name="$1"
	git checkout "$branch_name" --
}

alias gdh='git diff HEAD~'

function logout_from_all() {
	# Google Cloud
	gcloud auth revoke

	# Azure
	az logout
}

# Usage: ocr filepath language [eng,pol]
function ocr() {
	local -r filepath="$1"
	local -r language="${2:-eng}"

	tesseract "$filepath" stdout --oem 1 -l "$language"
}

alias start-pg='pg_ctl -l $PGDATA/server.log start'
alias stop-pg='pg_ctl stop -m fast'
alias show-pg-status='pg_ctl status'
alias restart-pg='pg_ctl reload'

function identify_website_technologies() {
	# https://github.com/rverton/webanalyze
	webanalyze -apps ~/dotfiles/technologies.json -host "$1" -crawl 1
}

# DNS server settings
function dns_server_settings_clear() {
	# macOS
	networksetup -setdnsservers Wi-Fi
	# TODO: Windows (via WSL)
}

function dns_server_settings_clear() {
	# macOS
	networksetup -setdnsservers Wi-Fi 8.8.8.8
	# TODO: Windows (via WSL)

}

function check_dns_server_settings_check() {
	# macOS
	networksetup -getdnsservers Wi-Fi
	# TODO: Windows (via WSL)
}

function flush_dns_cache() {
	# macOS
	sudo killall -HUP mDNSResponder
	# TODO: Windows (via WSL)
}

# Windows
function exec_powershell_script() {
	local script_path="$1"

	powershell.exe -ExecutionPolicy Bypass -File "$script_path"
}

function is_inside_virtual_env() {
	if [[ "$VIRTUAL_ENV" != "" ]]; then
		echo 1
	else
		echo 0
	fi
}

# Windows
function safely_remove_hardware() {
	rundll32.exe shell32.dll,Control_RunDLL hotplug.dll
}

function clone_website() {
	httrack "$1"
}

alias start_all_projects='c ~/dotfiles ~/scripts ~/design-system ~/static-pages'

function mkdircd() {
	mkdir "$1"
	cd "$1" || exit
}

alias whiptail='dialog'
alias gsa='git stash apply'

# Windows
alias wsl2_host_ip='cat /etc/resolv.conf | \grep nameserver | cut -d" " -f2'

# Windows, see: https://stackoverflow.com/a/69011313/963881
alias pip3='DISPLAY="" pip3'

alias python='python3'
