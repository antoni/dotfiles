# -*- shell-script -*-
# vim:set ft=sh textwidth=0 wrapmargin=0:
set +x

DEFAULT_CITY="Warsaw";
DEFAULT_COORDS="52.23:21.012'";

export BASH=/usr/local/bin/bash

source $HOME/dotfiles/colors.sh

function command_exists () { type "$1" &> /dev/null ; }

# Aliases and custom functions
platform='unknown'
export unamestr=`uname`
if [[ "$unamestr" == 'Darwin' ]]; then
    # Mac OS X-specific
    alias setmiddlevolume='sudo osascript -e "set Volume 5"'
    alias eclipseclean='/Applications/eclipse/Eclipse.app/Contents/MacOS/eclipse -clean'
    alias topcoder='javaws ~/Developer/Topcoder/ContestAppletProd.jnlp'
    alias copypubkey='xsel --clipboard < id_rsa.pub'
    # alias vim='mvim -v'
    alias ls='ls -h -lFG'
    alias brew='HOMEBREW_NO_AUTO_UPDATE=1 brew'
elif [[ "$unamestr" == 'Linux' ]]; then
    # Debian/Ubuntu
    function listkernels() {
        dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'
    }
alias gdebi='sudo gdebi'

    # Linux specific
    # alias i='sudo apt-get install -y'
    # Install through apt-get and add installed software to list of used commands
    # addcmd() { sudo apt-get install -y $* && echo $* >> ~/install_apt-get.txt; }
    function addcmd() { sudo dnf install -y $* && echo $* >> ~/install_apt-get.txt; }

    alias sound='alsamixer'
    alias open='xdg-open'
    alias st='scrot -ub '"'"'%Y:%m:%d:%H:%M:%S.png'"'"' -e '"'"'mv $f ~/Downloads/'"'"
    alias catquestions='cat ~/Documents/Q.txt'
    alias mountrw='mount -oÂ remount,rw /'
    alias vim='vim -o'
    alias ls='ls -h --color -lFG'
fi

# General purpose
alias vimb='vim ~/.bashrc'
alias vima='vim ~/.aliases'
alias vimr='vim ~/.remember'
alias vimexecdwm='sudo vim /usr/local/bin/dwm-personalized'
alias vimv='vim ~/.vimrc'
alias vimq='vim ~/Documents/Q.txt'
alias gq='gedit ~/Documents/Q.txt'
alias vimdwmconfig='vim ~/dwm/config.h'

alias cx='chmod +x'
alias dc='cd'
alias m='man' ; 
alias mm='man $(fc -ln -1 | cut -d" " -f 1)'
alias l='ls'
alias v='vim'
alias grep='grep --color -ni'
alias rmf='rm -rf'
alias o='rlwrap ocaml'
alias rpm='sudo rpm'

# System commands
alias free='free -h'

alias wgetdir='wget --recursive --no-parent '

# Programming etc.
alias m='make'
alias c99='gcc -std=c99'
alias g++='g++ -g -Wall -O3'
alias mountstudents='sshfs ar267209@students.mimuw.edu.pl: /Users/antoni/students'
alias students='export TERM=vt100 ; ssh students.mimuw.edu.pl -l ar267209 -t tmux a'
alias icm='ssh antoni@hpc.icm.edu.pl' 
alias icmgw='ssh antoni@gw.icm.edu.pl' 
alias bioex='ssh arosciszewski@bioexploratorium.pl'
#alias wget='curl -0'
alias xcode="open *.xcodeproj"

function tarfolder() { tar -czf "$1".tar.gz "$1"/*; }
function zipfolder() { zip -r "$1".zip "$1"/*; }

# SSH
alias sendstud='~/scripts/sendstud.sh'
alias sendicm='~/scripts/sendicm.sh'

# Android development
alias adbd='adb devices'
alias adbreset='adb kill-server;adb start-server'

# Git
alias g='git'
alias gitpu='git pull'
alias gitpua='git push --all -u'
alias gits='git status --short'
alias gitc='git commit -am'
alias gitca='git commit --amend -m'
alias gitch='git checkout'
alias gitd='git diff'
alias gd='git diff'
alias gitm='git merge'
alias gitb='git branch'
alias gitk='gitk --all'
alias gitundocommit='git reset --soft HEAD~1'
alias grb='git rebase master'
alias gri='git rebase integration'
alias gd='git diff'
alias gcw='git commit -m "WIP $(date)"'
alias gcm='git checkout master'
alias gg='git add -A && gcw && git squash 2'
alias gp='git pull'
alias grm='git rebase master'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias grs='git rebase --skip'
alias gsa='git stash apply'
alias gpom='git push origin master'
alias gca='git commit --amend'
alias gacw='git add . && gcw'

# Set `indent` parameters according to Linux kernel Coding Style
#alias indent='indent -kr -i8'
alias indent='indent -i8 -nbad -bap -nbc -br -brs -c33 -cd33 -ncdb -ce -ci4 -cli0 -d0 -di1 -nfc1 -i4 -ip0 -l75 -lp -npcs -npsl -nsc -nsob'
# Kill all jobs
alias kj='kill -9 $(jobs -p)'

# tmux
alias tm='tmux'
alias tma='tmux attach'
alias tmxa='tmux attach'
alias tmxl='tmux list-window'

# cd directory up
alias ..="cd .."
alias ....="cd ../.."
alias ......="cd ../../.."

# Helper functions
# function gg() { pwd > /tmp/last_path; }
# function hh() { cd $(cat /tmp/last_path); }

alias webserver='python -m SimpleHTTPServer 8080'
alias gprer='grep -R'

alias hgrep='history | grep -i'

# tmux  && source ~/.paths'
alias gopath="export GOPATH=\$(pwd)"
alias dbgui='/usr/share/dbeaver/dbeaver'

function singlemonitor() {
    primary=`xrandr | \grep "connected primary" | cut -d' ' -f1`;
    secondary=`xrandr | \grep " connected" | \grep -v "primary" | cut -d' ' -f1`;
    if [[ $secondary ]]; then
        xrandr --output "$secondary" --off --output "$primary" --auto;
    else 
        xrandr --output "$primary" --off; xrandr --output "$primary" --auto;
    fi
}

# alias dualmonitor='xrandr --output VGA1 --mode 1920x1200 --right-of LVDS1'
alias dualmonitor='xrandr --output HDMI-1 --mode 1680x1050 --right-of eDP-1'
alias dualmonitor2='xrandr --output VGA1 --mode 1680x1050 --right-of LVDS1'
alias dualmonitor_left='xrandr --output VGA1 --mode 1920x1200 --left-of LVDS1'
alias dualmonitor_ktech='xrandr --output HDMI-1 --mode 2560x1440 --right-of eDP-1'
alias dualmonitor_ktech_pres='xrandr --output HDMI-1 --mode 1920x1080i --right-of eDP-1'
alias dualmonitor_mirror='xrandr --output eDP-1 --rate 60 --mode 1920x1080 --fb 1920x1080 --panning 1920x1080* --output HDMI-1 --mode 1920x1080 --same-as eDP-1'

# Fixing various things on Ubuntu
alias fixaudio='pulseaudio -k' ; alias fixaudio2='pavucontrol'
alias fixaudio3='rm -r ~/.config/pulse; pulseaudio -k'
alias fixpowerctl='for i in /sys/bus/usb/devices/*/power/control; do echo on > $i; done'
alias fixtouchpad='sudo rmmod psmouse && sudo modprobe psmouse'
alias ubuntu_fix_apt='sudo apt-get install --fix-broken && sudo apt-get autoremove && sudo apt-get update'

alias explorer='nautilus --no-desktop'

# Markdown to PDF
function md2pdf() {
    pandoc -s -V papersize:a4 -V geometry:margin=1in --from gfm -o $1.pdf $1
    open $1.pdf
}

function rst2pdf() {
    pandoc -s -V papersize:a4 -V geometry:margin=1in --from rst -o $1.pdf $1
    open $1.pdf
}

# Serves github-rendered Markdown file (from .) on localhost:6419
alias md2html='grip'

# LaTeX
alias latexed1='texmaker'
alias latexed2='gummi'

alias gogo='cd ~/go/'
alias l='ls'

csview() {
    local file="$1"
    cat "$file" | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S
} 
# Custom cat: colourised and tabulated for CSV files alias cat='pygmentize -g'
xcat() { 
    filename=`basename $1`
    fileext=${filename##*.}
    if [ "$fileext" = "csv" ]; then
        csview $1
    else 
        pygmentize -g $1 
    fi
}

# Google search
s() {
    args=$@
    searchterm=${args// /%20}
    google-chrome-stable "http://www.google.com/search?q=$searchterm"
}

# Launch Vim solarized theme depending on the time of the day
vv() {
    echo $1
    hour=$(date +%H)
    theme=dark
    if [[ $hour -ge 6 && $hour -le 17 ]]; then
        theme=light
    fi
    terminator -l vim-solarized-$theme -c "vim -c 'set gb=$theme'"
}
# Use less +F instead of tail -f
# function tail() {
# if [ "$1" == '-f' ]; then
# shift
# less +F "$@"
# else
# command tail "$@"
# fi
# }
# Display 20 most frequently used commands in Bash
alias mostfrequent='history | cut -d " " -f 4 | tr -c "[:alnum:]" "[\n*]" | sort | uniq -c | sort -nr | head  -20'
# 20 Command Line Tools to Monitor Linux Performance
debug_commands=(ddd kdbg idaq cgdb)
perf_commands=(top vmstat tload stress lsof tcpdump netstat htop atop iotop iostat iptraf iftop monitorix monit arpwatch vnstat dstat nmon collectl dig mpstat, pkill powertop pidstat intel_gpu_top glances pstree nload sysstat sysdig)
hex_editors=(jeex okteta hte bless wxHexEditor dhex)
other_commands=(ruptime rwho)
# Networking
networking_commands=(netstat ethtool ping ifconfig arping traceroute iwconfig ifconfig tshark nethogs nmap nbtscan iptables  tcpdump iproute2 chargen netcat tc insmod fping nslookup host p0f mtr ipcalc sipcalc iperf)

function whichport() {
    netstat -tulpn | grep $@
}

# ip a s #List addresses for interfaces
# ip link show#List network interfaces
# ip route show #List routing table
# ip neigh Same#Show neighbors
# ip r add default via $ip0#Set default gateway to $ip
# ethtool eth0#Show status of ethernet interface eth0
# ip link set dev eth0 up/down#Bring interface eth0 up (or down)

# iwlist scan#List wireless networks in range

# fping is handy, sends lots of pings without waiting for responses, so you can rapidly ping a whole address range
# ping6 is to ping IPV6 address.

# Same for networking_commands
# random number (array len) to choose random command
alias ftp='filezilla'

# Python modules
alias pi='sudo pip install'
alias piu='sudo pip-review --interactive'
alias pil='pip list'

# Execute nth line of a file
nth() {
    eval `sed $1'q;d' $2`
}

# Countdown, usage: countdown 60, countdown $((2*60*60))
function countdown() {
    date1=$((`date +%s` + $1)); 
    while [ "$date1" -ne `date +%s` ]; do 
        echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
        sleep 0.1
    done
}
# Stopwach
function stopwatch(){
    date1=`date +%s`; 
    while true; do 
        echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
        sleep 0.1
    done
}

function mvd() { mv $1 ~/Downloads/; }

# Utils
# Print primitive data types sizes
alias typesizes='perl -V | grep size='
alias interrupts1='cat /proc/interrupts' # Get processor interrupts
alias memory1='cat /proc/meminfo'
alias disktest='sudo smartctl -a /dev/sda | less'
alias dmesg='dmesg -T'
alias dmesgerrors="dmesg | egrep 'error|fail|bug|rtl8|r8|wlan'"

alias irc='hexchat'
alias showdirsizes='du -Pshx * 2>/dev/null'
alias resetsound='pulseaudio -k && sudo alsa force-reload'
alias ns='nvidia-smi'
alias idrsa='cat ~/.ssh/id_rsa.pub'
alias iphone='~/scripts/setup_iphone.sh'
alias i='iphone'
alias pdfmerge='pdfunite'
alias desk='cd ~/Desktop'
alias mountstudents='sudo sshfs -o allow_other ar267209@students.mimuw.edu.pl:/home/students/bioinf/a/ar267209 ~/mount/students/'
alias euler='cd ~/Developer/ProjectEuler/'
alias wallpaperchange='gsettings set org.gnome.desktop.background picture-uri "file:///home/antoni/Documents/wallpaper4.jpg"'
alias showtunnels="sudo lsof -i -n | egrep '\\<ssh\\>'" # Show all open SSH tunnels
alias rsync='rsync --progress'
alias wificonn='sudo wifi-menu wlp2s0'
alias install_ycm='~/.vim/bundle/YouCompleteMe/install.sh --clang-completer'

h() {                                                                                                                                              
    head -n $@
}

pat() {
    if hash csearch 2>/dev/null; then
        csearch -i $1
    else
        [ ! -z "$2" ] && search_dir="$2" || search_dir="."
        grep -rnw $search_dir -e $1
    fi
}

alias cal='gcalcli'
alias dhcp0='sudo dhcpcd -n eth0'
alias top10size="find . -type f -printf '%s %p\n'| sort -nr | head -10ï»¿"

dl_website() {
    wget \
        --recursive \
        --no-clobber \
        --page-requisites \
        --html-extension \
        --convert-links \
        --restrict-file-names=windows \
        --no-parent \
        $1
    }

# cd ../../../
function up() {
    i=$1 
    while [ $i -gt 0 ] 
    do 
        cd .. 
        i=$(($i - 1))
    done 
}

# JSON pretty print
alias jsonpp='python -m json.tool'

# Git
function gc() {
    git commit -am "$*"
}

function gcp() {
    gc "$*";
    git push;
}

alias find='sudo find'
alias svim='sudo vim'
alias gv='gvim'

# endiannes:
# echo -n I | od -to2 | head -n1 | cut -f2 -d" " | cut -c6 

# Show errno errors
alias showerrors="cpp -dM /usr/include/errno.h | grep 'define E' | sort -n -k 3"

alias sourcetmux='tmux source-file ~/.tmux.conf'
alias p='python'

alias fixandroidstudio='IBUS_ENABLE_SYNC_MODE=1 ibus-daemon -xrd'

diffcount() {
    diff -U 0 $1 $2 | grep -c ^@
}

dark()  { export BACKGROUND=dark && source ~/.common_profile.sh;  }
light() { export BACKGROUND=light && source ~/.common_profile.sh; }

# alias gsa="gnome-screenshot -a"
alias rmcmd='sudo apt-get remove'

alias mergepdf='gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=merged.pdf ' # here go the PDF to be merged

alias autoremove='sudo apt-get autoremove'

alias redisgui='redis-desktop-manager'

function g++gtest() {
g++ -std=c++11 $1 -lgtest -lpthread && ./a.out
}

# Links all .o files to make elf_i386 executable
function link() {
    # Default value = test
    BIN=${1:-test};
    ld -m elf_i386 -s -o $BIN *.o 
}
# GCC flags:
# -fverbose-asm -S

function compile() {
    nasm -f elf $1
}

alias burn_iso='wodim'

# Recursive chmod
chmod_rec() {
    # find . -type d -exec chmod +rx {} \;
    find . -type d -exec chmod $1 {} \;
}

alias make='make -j 4'
alias gitresettoremote='git fetch origin ; git reset --hard origin/master'
alias rmp='rm ~/Pictures/Screenshot*'
alias i3wmreset='i3-msg "reload"'

# Check if port is open:
alias checkopenports='netstat -ano|grep 443|grep LISTEN'

pythontools=(2to3 pylint pyflakes autopep8)

alias classdiagram='staruml'

alias uwb='ssh a.rosciszewski@login.uco.uwb.edu.pl -p 9022'

alias tmuxhelp='cat ~/dotfiles/tmux.cheat | less'

alias sshprozacopy='ssh prozomat@213.135.59.214'

alias entropy='cat /proc/sys/kernel/random/entropy_avail'

alias dns_list_all='dig +nocmd yourdomain.com any +multiline +noall +answer'
alias install_ycm='~/.vim/bundle/YouCompleteMe/install.py --clang-completer  --gocode-completer'
alias switchm="xrandr --output VGA1 --left-of DP2" # switches monitors (left-right)

alias di='sudo dnf install -y'
alias ds='dnf search -C'
alias dr='sudo dnf remove'

alias ydl='youtube-dl --no-playlist --no-mtime'

alias ydlbest='ydl --format best'
alias ydlworst='ydl --format worst'
alias ydlaudio='youtube-dl --format best --extract-audio --audio-format mp3'

function ydlwl() {
    pushd ~/Documents/watch 
    ydl --ignore-errors https://www.youtube.com/playlist?list=PLxEBYuU7ONUfj68kBjXfHaAutKqtgAc4s
    popd
}

# alias mvn='~/scripts/mvncolor.sh'

# function ppgrep() { pgrep "$@" | xargs --no-run-if-empty ps fp; }
function ppgrep() { \pgrep "$@" -a | egrep --color "[0-9]"; }

function rdp() { rdesktop "$@" -rsound:remote -5 -K -r clipboard:CLIPBOARD; }

function swap()         
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Copies SSH RSA key to X clipboard
alias copykey='cat ~/.ssh/id_rsa.pub | xsel -i -b'

function dnfs() {
    arg_count = "$#"
    if [ arg_count -eq 2 ]; then
        dnf search $1 | grep $2
    elif [ arg_count -eq 1 ]; then
        dnf search $1
    fi
}

alias cups='lpstat' # -p -d

alias zsh_debug='zsh -i -x -c exit'

function fix_zsh_history() {
    cd $HOME > /dev/null
    mv .zsh_history .zsh_history_bad 
    strings .zsh_history_bad > .zsh_history
    fc -R .zsh_history
}

function fix_perms() {
    find . -type d -exec chmod 775 {} \;
    find . -type f -exec chmod 664 {} \;
}

function get_ip() {
    host $1 | awk '/has address/ { print $4 }' | head -n 1
}

# Query Linux man page for certain flag
# Example: manf iptables -t
function manf() {
    man $1 | less -p "^ +\-${2}"
}

alias rs='xfreerdp /kbd:0x415 /multimon +fonts /d:ger +clipboard +aero /home-drive /audio-mode:1 /v:GKSRDS007 /monitors:2'

alias dmidecode='sudo dmidecode'
alias ipconfig='ifconfig'

# Delete all containers & all images
function dockerrmall() {
    docker rm $(docker ps -a -q) && docker rmi $(docker images -q)
}

function list_installed() {
    dnf list installed | awk -F. -v ORS="\0" '{print $1" "}' | sort -zu && echo ""
}

# $1 - name of the folder to zip
function zip_and_move() {
    zip -r ~/Downloads/$1.zip $1/* $1/.*
}

# Download .gitignore
# Usage: gi language
function gitignore() { 
    curl -L -s https://www.gitignore.io/api/$@ | awk 'NR>2 {print last} {last=$0}' | tee .gitignore;
}

# Helper for watch_dir
function watch_dir_action() {
    while read path action file; do
        printf "[${colors[Green]}%s${colors[White]}]\t${colors[Red]}%s${colors[White]}\tin\t%s\n" $action $file $path
    done;
}

# $1 - dir to be watched for CREATE or MOVED_TO events
function watch_dir() {
    inotifywait -m $1 -e create -e moved_to | watch_dir_action;
}

HTML_TIDY_TMP_FILE="/tmp/tidy_log.txt"

# Reformats JS/JSON/HTML code
# Usage:
#   ./reformat filename
function reformat() {
    tmpf=/tmp/in_place_change_tmp
    filename=$(basename "$1")
    ext="${filename##*.}"

    echo "File extension: "$ext;

    case $ext in
        "md" )
            # Reformat against Github's Markdown styleguide
            pandoc -f markdown -t markdown_github "$1" > "$tmpf"
            ;;
        "js" )
            eslint --fix $1 > "$tmpf";
            ;;
        "jsx" )
            prettier --write $1
            ;;
        "json" )
            jq -M '.' > "$tmpf" < "$1";
            ;;
        "py" )
            autopep8 --in-place  $1;
            ;;
        "html" )
            tidy -indent -wrap 80 -utf8 -clean -file $HTML_TIDY_TMP_FILE $1 > "$tmpf";
            ;;
    esac
    mv -f "$tmpf" "$1" 2> /dev/null
}

alias a='cd ~/adnetwork'

# Toggles VPN connection
function vpn() {
    vpn_conn="VPN"
    vpn_cmd="up"
    if [[ $(nmcli connection show --active | \grep VPN) ]]; then
        vpn_cmd="down";
    fi;

    nmcli connection $vpn_cmd id $vpn_conn | tr ' ' '\n' | \grep --color activated
}

function redshift_loc() {
    redshift-gtk -v -l $DEFAULT_COORDS;
}

function weather() {
    curl --silent wttr.in/"${1:-$DEFAULT_CITY}" | head -n 7;
}

# Prints aggregated %MEM for a process ($1)
function total_mem() {
    top -b -n1 | \grep $1 | awk '{ SUM += $10} END { print SUM }'
}

# Edit last gnome-screenshot taken
function nomacslast() {
    files=(~/Pictures/*);
    nomacs "${files[-1]}";
}

# encrypt (filename -> filename.enc)
# $1 - input file
# $2 - password
function encrypt() {
    openssl enc -aes-256-cbc -in $1 -out $1.enc -k $2
}

# decrypt (filename.enc -> filename)
# $1 - input file
# $2 - password
function decrypt() {
    openssl enc -aes-256-cbc -d -in $1.enc -out $1 -k $2
}

# SSH and attach to tmux
function sshtmux() {
    ssh $1 -t tmux a
}

function pip_list() {
    pip3 list --format=columns | awk '!/Package|---/{ print $1}' 
    pip list --format=columns | awk '!/Package|---/{ print $1}' 
}

function update_packages_mac() {
    echo "Updating Homebrew packages..."

    # Fix casks with `depends_on` that reference pre-Mavericks
    /usr/bin/find "$(brew --prefix)/Caskroom/"*'/.metadata' -type f -name '*.rb' -print0 | /usr/bin/xargs -0 /usr/bin/sed -i '' '/depends_on macos:/d'

    brew update
    brew upgrade
    brew cask upgrade --greedy --force
    brew unlink node && brew link --overwrite node
}

function update_packages_fedora() {
    sudo dnf -y update
    sudo dnf -y autoremove
}

function update_packages_ubuntu() {
    echo "Updating apt packages..."
    sudo apt-get update &> /dev/null
    echo "Upgrading apt packages..."
    sudo apt-get upgrade -y &> /dev/null
    echo "Autoremoving apt packages..."
    sudo apt-get autoremove &> /dev/null
}

function sudo_keep_alive() {
    # Ask for the administrator password upfront
    sudo -v

    # kill -0 PID exits with an exit code of 0 if the PID is of
    # a running process, otherwise exits with an exit code of 1.
    # So, basically, kill -0 "$$" || exit aborts the while loop child process
    # as soon as the parent process is no longer running

    # Keep-alive: update existing `sudo` time stamp until `.macos` has finished
    while true; do sudo --non-interactive true; sleep 60;
        kill -0 "$$" || exit; done 2>/dev/null &
    }

function update_all() {
    sudo_keep_alive

    pushd ~ &> /dev/null # to correctly update global NPM packages
    upgrade_oh_my_zsh;
    update_packages_mac;
    echo "Updating Vim plugins..."
    vim -i NONE -c VundleUpdate -c quitall &> /dev/null
    echo "Updating npm packages..."

    # echo "Updating macOS (if updates available)"
    # softwareupdate -i -a

    ~/dotfiles/mac/post_install.sh

    # Do the rest without sudo
    sudo --reset-timestamp

    npm update -g;
    npm i npm;
    echo "Updating PIP packages..."
    pip3 install --upgrade pip;
    mas upgrade;

    popd &> /dev/null 

    printf "Updated all applications on %s\n" "`date`" >> ~/update_log.txt 
}

function merge_and_push_branch() {
    $HOME/scripts/merge_and_push_branch.sh $1;
}

function response_time() {
    FORMAT_PATH=`realpath ~/scripts/curl-format.txt`;
    curl -w "@"$FORMAT_PATH -o /dev/null -s $1;
}

alias vault=~/scripts/vault

# Example
# how_in bash get length of array
function how_in() { where="$1"; shift;IFS=+ curl "https://cht.sh/$where/ $*"; }

# TESTIT
# Add changes to a selected commit.
# Usage:

# * modify file
# * git-amend-to $old_sha
git-amend-to() (
# Stash, apply to past commit, and rebase the current branch on to of the result.
current_branch="$(git rev-parse --abbrev-ref HEAD)"
apply_to="$1"
git stash
git checkout "$apply_to"
git stash apply
git add -u
git commit --amend --no-edit
new_sha="$(git log --format="%H" -n 1)"
git checkout "$current_branch"
git rebase --onto "$new_sha" "$apply_to"
)

alias bci='brew cask install'
# Usage openssl_website google.com:80
alias openssl_website='openssl s_client -connect -crlf'

function json_compare() {
    diff <(jq -S . $2) <(jq -S . $2)
}

function pdf_compress() {
    local input_file=$1
    local output_file=${2:-$1_output.pdf}
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4  -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$output_file $input_file
}

function diff {
    colordiff --unified "$@" | less --RAW-CONTROL-CHARS --quit-if-one-screen
}

alias sizes='du -sh * | sort -hr'

alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -'

function filename_without_extension() {
    local full_path=$1
    filename=$(basename -- "$full_path")
    extension=$([[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo '')
    filename="${filename%.*}"
    echo $filename
}

function filename_extension() {
    local extension="${1##*.}"
    echo $extension
}

# Converts SVG to PNG
# Usage svg_to_png input_image_path [output_image_height]
function svg_to_png() {
    local filename=`filename_without_extension $1`
    local output_filename=$filename.png
    local output_image_height=${2:-32}
    rsvg-convert -h $output_image_height $1 > "$output_filename" && echo "Successfully created $output_filename" || echo "Error converting $1 to $output_filename"
}

function webptopng() {
    local filename=`filename_without_extension $1`
    local output_filename=$filename.png
    local output_image_height=${2:-32}
    dwebp $1 -o $output_filename
}

function pdftojpg() {
    pdfimages -j $1 page
}

function android_update() {
    android update sdk --no-ui
}

function last_modified_directory() {
    echo `\ls -t | head -n 1`
}

function convert_all_files() {
    local substitution="$1"
    $BASH -c 'for filename in *;do mv $filename ${filename'"$substitution"'};done'
}

# Lowercase the first letter
function lowercase_first_letter() {
    convert_all_files ","
}

# Uppercase first letter
function uppercase_first_letter() {
    convert_all_files "^"
}

# Lowercase all letters
function lowercase_all_letters() {
    convert_all_files "m,"
}

# Uppercase all letters
function uppercase_all_letters() {
    convert_all_files "^^"
}

alias buildlib='cd ~/components-library ; npm run build && firebase deploy && npm run clean'
alias mac_serial_number="system_profiler SPHardwareDataType | \grep '      Serial Number' | cut -d' ' -f 10 | pbcopy"

function save_chrome_extension_list() {
    local OUTPUT_FILE=~/scripts/chrome_extensions.txt
    rm $OUTPUT_FILE;
    EXT_DIR="/Users/`whoami`/Library/Application Support/Google/Chrome/Default/Extensions";
    pushd $EXT_DIR
    for f in `\ls */*/manifest.json`;do cat $f | jq -r '.name' >> $OUTPUT_FILE;done
    popd
    cat $OUTPUT_FILE
}

# Updates scripts repo with current date in the message
# of the (possibly empty) commit
function update_scripts_repo() {
    pushd ~/scripts
    git add .
    git commit --allow-empty --message "Update "$(date +%d-%m-%Y)
    git push origin
    popd
}

alias nrs='npm run start';
alias ys='yarn start'
alias yi='yarn install'
alias yt='yarn test'
alias yc='yarn run clean'
alias yrc='yarn run clean'

function mcd() {
    mkdir $1 && cd $1
}

alias npmu='npm install -g npm'

alias yarnnoproxy='yarn --no-default-rc'

alias rmrf='rm -rf'

alias tmux2x2='tmux new-session \; split-window -v \; split-window -h \; select-pane -t 0 \; split-window -h\; select-pane -t 0;'

alias removevpn='brew cask remove nordvpn || brew cask install nordvpn'

# macOS only
alias flush_dns_cache='dscacheutil -flushcache; sudo killall -HUP mDNSResponder'

alias nvm_default='nvm alias default node'
alias nvm_current='nvm install node --reinstall-packages-from=$(nvm current)'

function mov2mp4() {
    local filename=`filename_without_extension $1`
    ffmpeg -i $filename.mov -vcodec h264 -acodec mp2 $filename.mp4
}

# Rename  part of filename in each file in a directory
function rename_filename_part() {
    for filename in *; do 
        [ -f "$filename" ] || continue
        mv "$filename" "${filename/$1/$2}"
    done
}

# Remove part of filename in each file in a directory
function remove_filename_part() {
    for filename in *; do 
        [ -f "$filename" ] || continue
        mv "$filename" "${filename//$1/}"
    done
}

# Prints the lsof entry of the process that listens on a given port
# Usage:
#   listening firefox
#   listening 8080
function listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

alias instagram_dl='instalooter user'
